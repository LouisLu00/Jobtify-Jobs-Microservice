name: Deploy to EC2

on:
  push:
    branches:
      - deploy

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

#      - name: Build with Maven
#        env:
#          DB_URL: ${{ secrets.DB_URL }}
#          DB_USERNAME: ${{ secrets.DB_USERNAME }}
#          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
#        run: mvn -B package --file pom.xml

      - name: Build and Push Docker Image with Jib
        env:
          REGISTRY_USERNAME: ${{ secrets.DOCKER_EMAIL }}
          REGISTRY_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          mvn compile jib:build \
            -Dimage=louislu000/jobs-microservice:latest \
            -Dregistry.username=$REGISTRY_USERNAME \
            -Dregistry.password=$REGISTRY_PASSWORD

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          CONTAINER_IMAGE: louislu00/jobs-microservice:latest
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@$EC2_HOST << 'EOF'
            # Pull the latest image from Docker Hub
            docker pull $CONTAINER_IMAGE

            # Stop and remove any existing container
            docker stop my-spring-app || true
            docker rm my-spring-app || true

            # Run the new container with environment variables
            docker run -d --name my-spring-app -p 8080:8080 \
              -e DB_URL=$DBURL \
              -e DB_USERNAME=$DB_USERNAME \
              -e DB_PASSWORD=$DB_PASSWORD \
              $CONTAINER_IMAGE
          EOF
